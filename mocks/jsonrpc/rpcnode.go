// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package jsonrpc_mock

import (
	"context"
	"github.com/duneanalytics/blockchain-ingester/client/jsonrpc"
	"github.com/duneanalytics/blockchain-ingester/models"
	"sync"
)

// Ensure, that BlockchainClientMock does implement jsonrpc.BlockchainClient.
// If this is not the case, regenerate this file with moq.
var _ jsonrpc.BlockchainClient = &BlockchainClientMock{}

// BlockchainClientMock is a mock implementation of jsonrpc.BlockchainClient.
//
//	func TestSomethingThatUsesBlockchainClient(t *testing.T) {
//
//		// make and configure a mocked jsonrpc.BlockchainClient
//		mockedBlockchainClient := &BlockchainClientMock{
//			BlockByNumberFunc: func(ctx context.Context, blockNumber int64) (models.RPCBlock, error) {
//				panic("mock out the BlockByNumber method")
//			},
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			LatestBlockNumberFunc: func() (int64, error) {
//				panic("mock out the LatestBlockNumber method")
//			},
//		}
//
//		// use mockedBlockchainClient in code that requires jsonrpc.BlockchainClient
//		// and then make assertions.
//
//	}
type BlockchainClientMock struct {
	// BlockByNumberFunc mocks the BlockByNumber method.
	BlockByNumberFunc func(ctx context.Context, blockNumber int64) (models.RPCBlock, error)

	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// LatestBlockNumberFunc mocks the LatestBlockNumber method.
	LatestBlockNumberFunc func() (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// BlockByNumber holds details about calls to the BlockByNumber method.
		BlockByNumber []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BlockNumber is the blockNumber argument value.
			BlockNumber int64
		}
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// LatestBlockNumber holds details about calls to the LatestBlockNumber method.
		LatestBlockNumber []struct {
		}
	}
	lockBlockByNumber     sync.RWMutex
	lockClose             sync.RWMutex
	lockLatestBlockNumber sync.RWMutex
}

// BlockByNumber calls BlockByNumberFunc.
func (mock *BlockchainClientMock) BlockByNumber(ctx context.Context, blockNumber int64) (models.RPCBlock, error) {
	if mock.BlockByNumberFunc == nil {
		panic("BlockchainClientMock.BlockByNumberFunc: method is nil but BlockchainClient.BlockByNumber was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		BlockNumber int64
	}{
		Ctx:         ctx,
		BlockNumber: blockNumber,
	}
	mock.lockBlockByNumber.Lock()
	mock.calls.BlockByNumber = append(mock.calls.BlockByNumber, callInfo)
	mock.lockBlockByNumber.Unlock()
	return mock.BlockByNumberFunc(ctx, blockNumber)
}

// BlockByNumberCalls gets all the calls that were made to BlockByNumber.
// Check the length with:
//
//	len(mockedBlockchainClient.BlockByNumberCalls())
func (mock *BlockchainClientMock) BlockByNumberCalls() []struct {
	Ctx         context.Context
	BlockNumber int64
} {
	var calls []struct {
		Ctx         context.Context
		BlockNumber int64
	}
	mock.lockBlockByNumber.RLock()
	calls = mock.calls.BlockByNumber
	mock.lockBlockByNumber.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *BlockchainClientMock) Close() error {
	if mock.CloseFunc == nil {
		panic("BlockchainClientMock.CloseFunc: method is nil but BlockchainClient.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedBlockchainClient.CloseCalls())
func (mock *BlockchainClientMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// LatestBlockNumber calls LatestBlockNumberFunc.
func (mock *BlockchainClientMock) LatestBlockNumber() (int64, error) {
	if mock.LatestBlockNumberFunc == nil {
		panic("BlockchainClientMock.LatestBlockNumberFunc: method is nil but BlockchainClient.LatestBlockNumber was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLatestBlockNumber.Lock()
	mock.calls.LatestBlockNumber = append(mock.calls.LatestBlockNumber, callInfo)
	mock.lockLatestBlockNumber.Unlock()
	return mock.LatestBlockNumberFunc()
}

// LatestBlockNumberCalls gets all the calls that were made to LatestBlockNumber.
// Check the length with:
//
//	len(mockedBlockchainClient.LatestBlockNumberCalls())
func (mock *BlockchainClientMock) LatestBlockNumberCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLatestBlockNumber.RLock()
	calls = mock.calls.LatestBlockNumber
	mock.lockLatestBlockNumber.RUnlock()
	return calls
}
