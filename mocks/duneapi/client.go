// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package duneapi_mock

import (
	"github.com/duneanalytics/blockchain-ingester/client/duneapi"
	"github.com/duneanalytics/blockchain-ingester/models"
	"sync"
)

// Ensure, that BlockchainIngesterMock does implement duneapi.BlockchainIngester.
// If this is not the case, regenerate this file with moq.
var _ duneapi.BlockchainIngester = &BlockchainIngesterMock{}

// BlockchainIngesterMock is a mock implementation of duneapi.BlockchainIngester.
//
//	func TestSomethingThatUsesBlockchainIngester(t *testing.T) {
//
//		// make and configure a mocked duneapi.BlockchainIngester
//		mockedBlockchainIngester := &BlockchainIngesterMock{
//			SendBlockFunc: func(payload models.RPCBlock) error {
//				panic("mock out the SendBlock method")
//			},
//		}
//
//		// use mockedBlockchainIngester in code that requires duneapi.BlockchainIngester
//		// and then make assertions.
//
//	}
type BlockchainIngesterMock struct {
	// SendBlockFunc mocks the SendBlock method.
	SendBlockFunc func(payload models.RPCBlock) error

	// calls tracks calls to the methods.
	calls struct {
		// SendBlock holds details about calls to the SendBlock method.
		SendBlock []struct {
			// Payload is the payload argument value.
			Payload models.RPCBlock
		}
	}
	lockSendBlock sync.RWMutex
}

// SendBlock calls SendBlockFunc.
func (mock *BlockchainIngesterMock) SendBlock(payload models.RPCBlock) error {
	if mock.SendBlockFunc == nil {
		panic("BlockchainIngesterMock.SendBlockFunc: method is nil but BlockchainIngester.SendBlock was just called")
	}
	callInfo := struct {
		Payload models.RPCBlock
	}{
		Payload: payload,
	}
	mock.lockSendBlock.Lock()
	mock.calls.SendBlock = append(mock.calls.SendBlock, callInfo)
	mock.lockSendBlock.Unlock()
	return mock.SendBlockFunc(payload)
}

// SendBlockCalls gets all the calls that were made to SendBlock.
// Check the length with:
//
//	len(mockedBlockchainIngester.SendBlockCalls())
func (mock *BlockchainIngesterMock) SendBlockCalls() []struct {
	Payload models.RPCBlock
} {
	var calls []struct {
		Payload models.RPCBlock
	}
	mock.lockSendBlock.RLock()
	calls = mock.calls.SendBlock
	mock.lockSendBlock.RUnlock()
	return calls
}
